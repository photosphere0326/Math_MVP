version: '3.8'

services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: math_problems
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/math_problems
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  celery:
    build:
      context: .
      dockerfile: Dockerfile.celery
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/math_problems
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
    restart: unless-stopped

  celery-flower:
    build:
      context: .
      dockerfile: Dockerfile.celery
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/math_problems
      - REDIS_URL=redis://redis:6379/0
      - PYTHONPATH=/app
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
    command: ["celery", "-A", "celery_worker", "flower", "--port=5555", "--broker=redis://redis:6379/0"]
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data: